// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PP.Usuario.API.Data;

namespace PP.Usuario.API.Migrations
{
    [DbContext(typeof(UsuarioContext))]
    [Migration("20210512214424_UpdateRelatinament")]
    partial class UpdateRelatinament
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PP.Usuario.API.Models.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataExcluido")
                        .HasColumnName("DataExcluido")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnName("DataNascimento")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Excluido")
                        .HasColumnName("Excluido")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.AnamnesePergunta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pergunta")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("AnamnesePergunta");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.AnamneseResposta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnamnesePerguntaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesePerguntaId");

                    b.ToTable("AnamneseResposta");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Biometria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Altura")
                        .HasColumnType("decimal(3,2)");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AnteBracoDireito")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AnteBracoEsquerdo")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("BracoDireito")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("BracoEsquerdo")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Cintura")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("CoxaDireita")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("CoxaEsquerda")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnName("DataExcluido")
                        .HasColumnType("datetime");

                    b.Property<bool>("Desativado")
                        .HasColumnName("Excluido")
                        .HasColumnType("bit");

                    b.Property<decimal>("GemeoDireito")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("GemeoEsquerdo")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Peso")
                        .HasColumnType("int");

                    b.Property<decimal>("Quadril")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Torax")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.ToTable("Biometria");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33e807cb-419d-4115-9988-b2aa187495fc"),
                            Nome = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("defc1b08-de90-4ab5-ae61-7e519d8fcdf3"),
                            Nome = "Acre",
                            Sigla = "AC"
                        },
                        new
                        {
                            Id = new Guid("274200e1-9a6a-44f4-9388-a2ec36b331bb"),
                            Nome = "Alagoas",
                            Sigla = "AL"
                        },
                        new
                        {
                            Id = new Guid("640970ce-e1f1-4314-a9df-47c76a2d67fe"),
                            Nome = "Amapá",
                            Sigla = "AP"
                        },
                        new
                        {
                            Id = new Guid("28bab9e4-ed5f-4325-b9a2-10c3cc242fc2"),
                            Nome = "Amazonas",
                            Sigla = "AM"
                        },
                        new
                        {
                            Id = new Guid("c2acedc2-a3cf-4695-a8f1-2a7a93d94e1a"),
                            Nome = "Bahia",
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("cc9a0907-716a-46b4-8ae8-fa26c03091d9"),
                            Nome = "Ceará",
                            Sigla = "CE"
                        },
                        new
                        {
                            Id = new Guid("349160b8-b41d-4e6a-80fe-1ab627485f4e"),
                            Nome = "Distrito Federal",
                            Sigla = "DF"
                        },
                        new
                        {
                            Id = new Guid("ff6ee140-ece6-455b-8b52-f75ce5824a96"),
                            Nome = "Espírito Santo",
                            Sigla = "ES"
                        },
                        new
                        {
                            Id = new Guid("df0b7049-617c-446f-a8a3-a042378784e5"),
                            Nome = "Goiás",
                            Sigla = "GO"
                        },
                        new
                        {
                            Id = new Guid("11b40f14-51d5-4da3-a295-7db3d129ac20"),
                            Nome = "Maranhão",
                            Sigla = "MA"
                        },
                        new
                        {
                            Id = new Guid("3a4a0780-4eae-4b1a-b107-685f3aa8a13f"),
                            Nome = "Minas Gerais",
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("ef74f3f6-ef3b-4ef2-9453-396d73b0891b"),
                            Nome = "Mato Grosso do Sul",
                            Sigla = "MS"
                        },
                        new
                        {
                            Id = new Guid("cdfd6952-c90d-4f15-886f-611b89b6685a"),
                            Nome = "Mato Grosso",
                            Sigla = "MT"
                        },
                        new
                        {
                            Id = new Guid("e92357f8-6e1c-4ead-807d-e3eebffed9c0"),
                            Nome = "Pará",
                            Sigla = "PA"
                        },
                        new
                        {
                            Id = new Guid("78d792d2-3e1f-4cce-849f-5f9bf91f53c6"),
                            Nome = "Paraíba",
                            Sigla = "PB"
                        },
                        new
                        {
                            Id = new Guid("3b74bede-7aa4-4292-9746-4b580440594e"),
                            Nome = "Pernambuco",
                            Sigla = "PE"
                        },
                        new
                        {
                            Id = new Guid("ccbd97ae-6612-4d4c-9f04-7b96f5fce185"),
                            Nome = "Piauí",
                            Sigla = "PI"
                        },
                        new
                        {
                            Id = new Guid("78564eb0-68e2-4e45-86bc-99915c383afc"),
                            Nome = "Paraná",
                            Sigla = "PR"
                        },
                        new
                        {
                            Id = new Guid("99db698a-7f61-4f10-9451-80904aa5cce2"),
                            Nome = "Rio de Janeiro",
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("351834e9-b5f4-4185-bc1c-ba8b23161ded"),
                            Nome = "Rio Grande do Norte",
                            Sigla = "RN"
                        },
                        new
                        {
                            Id = new Guid("24031933-d6e0-4922-8f3e-0b3c30324593"),
                            Nome = "Rondônia",
                            Sigla = "RO"
                        },
                        new
                        {
                            Id = new Guid("6734eec6-6ab0-4542-b4c0-a2ae82b3681e"),
                            Nome = "Roraima",
                            Sigla = "RR"
                        },
                        new
                        {
                            Id = new Guid("da74e75c-b523-46c2-bc69-bc3576cc1830"),
                            Nome = "Rio Grande do Sul",
                            Sigla = "RS"
                        },
                        new
                        {
                            Id = new Guid("9abe7da8-d0c8-4d27-b434-b3f10b03e1df"),
                            Nome = "Santa Catarina",
                            Sigla = "SC"
                        },
                        new
                        {
                            Id = new Guid("ff3df197-252c-424a-83ac-7fa5e059f2cc"),
                            Nome = "Sergipe",
                            Sigla = "SE"
                        },
                        new
                        {
                            Id = new Guid("e5c4b9bd-812d-480f-b1ff-70fbcb0925ed"),
                            Nome = "Tocantins",
                            Sigla = "TO"
                        });
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Ficha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnamneseRespostaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<string>("Objetivo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AnamneseRespostaId");

                    b.ToTable("Ficha");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CREF")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DataCadastro")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataExcluido")
                        .HasColumnName("DataExcluido")
                        .HasColumnType("datetime");

                    b.Property<bool>("Excluido")
                        .HasColumnName("Excluido")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Aluno", b =>
                {
                    b.HasOne("PP.Usuario.API.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .IsRequired();

                    b.HasOne("PP.Usuario.API.Models.Professor", "Professor")
                        .WithMany("Aluno")
                        .HasForeignKey("ProfessorId")
                        .IsRequired();

                    b.OwnsOne("PP.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AlunoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasColumnType("varchar(254)");

                            b1.HasKey("AlunoId");

                            b1.ToTable("Aluno");

                            b1.WithOwner()
                                .HasForeignKey("AlunoId");
                        });
                });

            modelBuilder.Entity("PP.Usuario.API.Models.AnamneseResposta", b =>
                {
                    b.HasOne("PP.Usuario.API.Models.AnamnesePergunta", "AnamnesePergunta")
                        .WithMany("AnamneseResposta")
                        .HasForeignKey("AnamnesePerguntaId")
                        .IsRequired();
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Biometria", b =>
                {
                    b.HasOne("PP.Usuario.API.Models.Aluno", "Aluno")
                        .WithMany("Biometria")
                        .HasForeignKey("AlunoId")
                        .IsRequired();
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Endereco", b =>
                {
                    b.HasOne("PP.Usuario.API.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .IsRequired();
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Ficha", b =>
                {
                    b.HasOne("PP.Usuario.API.Models.Aluno", "Aluno")
                        .WithMany("Ficha")
                        .HasForeignKey("AlunoId")
                        .IsRequired();

                    b.HasOne("PP.Usuario.API.Models.AnamneseResposta", "AnamneseResposta")
                        .WithMany("Ficha")
                        .HasForeignKey("AnamneseRespostaId")
                        .IsRequired();
                });

            modelBuilder.Entity("PP.Usuario.API.Models.Professor", b =>
                {
                    b.OwnsOne("PP.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ProfessorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasColumnType("varchar(254)");

                            b1.HasKey("ProfessorId");

                            b1.ToTable("Professor");

                            b1.WithOwner()
                                .HasForeignKey("ProfessorId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
